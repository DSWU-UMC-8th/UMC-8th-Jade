//
//  ReceiptsViewModel.swift
//  StarbucksApp
//
//  Created by Jung Hyun Han on 4/27/25.
//

import Foundation
import SwiftUI
import SwiftData
import Vision

@Observable
class ReceiptsViewModel: ObservableObject {
    var receipts: [ReceiptsModel] = []
    var showImagePicker: Bool = false
    var sourceType: UIImagePickerController.SourceType = .photoLibrary
    var selectedUIImage: UIImage? = nil
    var showReceiptDetailImage: Bool = false
    var selectedReceiptImageData: Data? = nil

    private var context: ModelContext

    init(context: ModelContext) {
        self.context = context
        fetchReceipts()
    }

    func fetchReceipts() {
        do {
            let fetchDescriptor = FetchDescriptor<ReceiptsModel>(sortBy: [SortDescriptor(\.purchaseDate, order: .reverse)])
            receipts = try context.fetch(fetchDescriptor)
            print("üì¶ fetchÎêú receipts Í∞úÏàò: \(receipts.count)")
        } catch {
            print("‚ùå Failed to fetch receipts: \(error.localizedDescription)")
        }
    }

    func deleteReceipt(_ receipt: ReceiptsModel) {
        context.delete(receipt)
        fetchReceipts()
    }

    func extractReceiptInfo(from image: UIImage, imageData: Data) {
        guard let cgImage = image.cgImage else { return }

        let requestHandler = VNImageRequestHandler(cgImage: cgImage, options: [:])
        let request = VNRecognizeTextRequest { [weak self] (request, error) in
            guard let self = self else { return }

            if let observations = request.results as? [VNRecognizedTextObservation] {
                let recognizedStrings = observations.compactMap { $0.topCandidates(1).first?.string }
                let fullText = recognizedStrings.joined(separator: "\n")

                print("===== OCR Ï†ÑÏ≤¥ Í≤∞Í≥º ÏãúÏûë =====")
                print(fullText)
                print("===== OCR Ï†ÑÏ≤¥ Í≤∞Í≥º ÎÅù =====")

                let parsed = self.parseWithoutRegex(from: fullText)

                let newReceipt = ReceiptsModel(
                    storeName: parsed.store,
                    purchaseDate: parsed.purchaseDate,
                    totalAmount: parsed.totalAmount,
                    imageData: imageData
                )

                self.context.insert(newReceipt)
                do {
                    try self.context.save()
                    print("‚úÖ SwiftData Ï†ÄÏû• ÏÑ±Í≥µ")
                } catch {
                    print("‚ùå Context save Ïã§Ìå®: \(error.localizedDescription)")
                }

                DispatchQueue.main.async {
                    self.fetchReceipts()
                }
            }
        }

        request.recognitionLevel = .accurate
        request.recognitionLanguages = ["ko-KR"]

        do {
            try requestHandler.perform([request])
        } catch {
            print("‚ùå OCR Ïã§Ìå®: \(error.localizedDescription)")
        }
    }

    func parseWithoutRegex(from text: String) -> (store: String, purchaseDate: Date, totalAmount: Int) {
        let lines = text.components(separatedBy: .newlines)

        var store = "Ïû•ÏÜå ÏóÜÏùå"
        var totalAmount = 0
        var date = Date()

        var i = 0
        while i < lines.count {
            let trimmed = lines[i].trimmingCharacters(in: .whitespacesAndNewlines)
            print("üîç \(trimmed)")

            // Ïû•ÏÜå Ï∂îÏ∂ú
            if store == "Ïû•ÏÜå ÏóÜÏùå", trimmed.contains("Ï†ê") {
                store = trimmed
            }

            // ÎÇ†Ïßú Ï∂îÏ∂ú
            if let range = trimmed.range(of: #"20\d{2}-\d{2}-\d{2}\s?\d{2}:\d{2}:\d{2}"#, options: .regularExpression) {
                var dateString = String(trimmed[range])

                if !dateString.contains(" ") && dateString.count >= 17 {
                    let insertIndex = dateString.index(dateString.startIndex, offsetBy: 10)
                    dateString.insert(" ", at: insertIndex)
                }

                let formatter = DateFormatter()
                formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
                if let parsed = formatter.date(from: dateString) {
                    date = parsed
                }
            }


            // Í≤∞Ï†ú Í∏àÏï° Ï∂îÏ∂ú - Î∞©Ïãù 1: Í≤∞Ï†úÍ∏àÏï° + 2Ï§Ñ Îí§
            if trimmed.contains("Í≤∞Ï†úÍ∏àÏï°"), i + 2 < lines.count {
                let priceLine = lines[i + 2].trimmingCharacters(in: .whitespaces)
                let numberOnly = priceLine.components(separatedBy: CharacterSet.decimalDigits.inverted).joined()
                if let amountParsed = Int(numberOnly) {
                    totalAmount = amountParsed
                }
            }

            // Í≤∞Ï†ú Í∏àÏï° Ï∂îÏ∂ú - Î∞©Ïãù 2: Ìï©Í≥ÑÎÇò ÏâºÌëú Ìè¨Ìï® Ïà´ÏûêÏ§Ñ
            if trimmed.contains("Ìï©Í≥Ñ") || trimmed.range(of: #"^\d{1,3}(,\d{3})+$"#, options: .regularExpression) != nil {
                let digits = trimmed.filter { "0123456789".contains($0) }
                if let value = Int(digits) {
                    totalAmount = max(totalAmount, value)
                }
            }

            i += 1
        }

        print("üè™ Îß§Ïû•Î™Ö: \(store)")
        print("üóìÔ∏è ÎÇ†Ïßú: \(date)")
        print("üí∞ Í≤∞Ï†ú Í∏àÏï°: \(totalAmount)")

        return (store, date, totalAmount)
    }
}
